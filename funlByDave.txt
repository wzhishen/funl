def eq x y =
    if x - y then 0
             else if y - x then 0
                           else 1
                  end
    end
end

def gt x y = x - y end

def lt x y = y - x end

def ge x y =
    if gt(x, y)
    then 1
    else if eq(x, y)
         then 1
         else 0
         end
    end
end

def le x y = if lt(x, y) then 1
                         else if eq(x, y) then 1
                                          else 0 
                              end
             end
end

def ne x y = if eq(x, y) then 0 else 1 end end

def factorial n =
	if n - 1 then n * factorial(n - 1)
	         else 1
	end
end

def or x y =
	if x then x else y end
end

def fibonacci n =
	if or(eq(n, 1), eq(n, 2))
	then 1
	else fibonacci(n - 1) + fibonacci(n - 2)
	end
end

def abs x = if x then x else 0 - x end end

def nearly_equal x y = lt(abs(x - y), 0.00001) end

def sqrt x = sqrt_helper(x, 1) end

def sqrt_helper x y =
    val y_squared = y * y,
    if nearly_equal(x, y_squared)
    then y
    else val next_guess = (y + x / y) / 2,
         sqrt_helper(x, next_guess)
    end
end

def summer =
	val total = 0,
	summer_helper(total)
end

def summer_helper total =
    val n = read "Give me a number (0 to stop): ",
    if eq(n, 0) then total else summer_helper(total + n) end
end

def power x n = if eq(n, 1) then x else x * power(x, n - 1) end end

def identity x = x end

def add x y = x + y end

def multiply x y = x * y end

def square x = multiply(x, x) end

def for first last apply combine =
    val init = apply(first),
    if ge(first, last)
        then init
        else combine(init, for((first +1), last, apply, combine))
    end
end

def factorial2 n = for(1, n, identity, multiply) end
    
def sum_of_1_to_n function n =
	if eq(n, 0) then 0
	            else function(n) + sum_of_1_to_n(function, n - 1)
     end
end

def square x = x * x end

def sum_of_squares first last = for(first, last, square, add) end